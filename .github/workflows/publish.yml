name: Publish

on:
  workflow_dispatch:

defaults:
  run:
    working-directory: .

permissions:
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version-output.outputs.version }}
    permissions:
      contents: read

    steps:
      - name: Version
        id: version-output
        run: |
          VERSION=$(curl "https://api.github.com/repos/withinfocus/tba-mcp-server/releases" | jq -r '.[] | select(.tag_name | contains("v")) | .tag_name' | head -1 | sed 's/^v//')
          echo "Latest released version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  deploy-npm:
    name: Deploy NPM
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          initial-status: "in_progress"
          environment: "NPM"
          description: "Deployment ${{ needs.setup.outputs.release_version }} from branch ${{ github.ref_name }}"
          task: release

  deploy-docker:
    name: Deploy Docker
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          initial-status: "in_progress"
          environment: "Docker"
          description: "Deployment ${{ needs.setup.outputs.release_version }} from branch ${{ github.ref_name }}"
          task: release

  publish-ghpr:
    name: GHPR
    runs-on: ubuntu-latest
    needs:
      - setup
      - deploy-npm
    permissions:
      packages: write
    env:
      _PKG_VERSION: ${{ needs.setup.outputs.release_version }}
      HUSKY: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: refs/tags/v${{ env._PKG_VERSION }}

      - name: Download
        run: |
          wget "https://github.com/${{ github.repository }}/releases/download/v${{ env._PKG_VERSION }}/mcp-server-${{ env._PKG_VERSION }}.zip"
          unzip "mcp-server-${{ env._PKG_VERSION }}.zip"

      - name: Setup
        run: |
          echo 'registry="https://npm.pkg.github.com/"' > ./.npmrc
          echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" >> ./.npmrc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish
        run: npm publish --access public --registry=https://npm.pkg.github.com/ --userconfig=./.npmrc

  publish-npm:
    name: NPM
    runs-on: ubuntu-latest
    needs:
      - setup
      - deploy-npm
    permissions:
      packages: read
      id-token: write
    env:
      _PKG_VERSION: ${{ needs.setup.outputs.release_version }}
      HUSKY: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: refs/tags/v${{ env._PKG_VERSION }}

      - name: Node version
        id: retrieve-node-version
        run: |
          NODE_NVMRC=$(cat .nvmrc)
          NODE_VERSION=${NODE_NVMRC/v/''}
          echo "node_version=$NODE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
          node-version: ${{ steps.retrieve-node-version.outputs.node_version }}

      - name: NPM
        run: npm install -g npm@latest

      - name: Download
        run: |
          wget https://github.com/${{ github.repository }}/releases/download/v${{ env._PKG_VERSION }}/mcp-server-${{ env._PKG_VERSION }}.zip
          unzip mcp-server-${{ env._PKG_VERSION }}.zip

      - name: Publish
        run: npm publish --access public

  publish-ghcr:
    name: GHCR
    runs-on: ubuntu-latest
    needs:
      - setup
      - deploy-docker
    permissions:
      contents: read
      packages: write
    env:
      _RELEASE_TAG: ${{ needs.setup.outputs.release_version }}
      _IMAGE_NAME: ghcr.io/withinfocus/tba-mcp-server

    steps:
      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker
        run: |
          docker pull "${{ env._IMAGE_NAME }}:${{ env._RELEASE_TAG }}"
          docker tag "${{ env._IMAGE_NAME }}:${{ env._RELEASE_TAG }}" "${{ env._IMAGE_NAME }}:latest"
          docker push "${{ env._IMAGE_NAME }}:latest"

      - name: Logout
        run: docker logout ghcr.io

  update-deployment-npm:
    name: NPM status
    runs-on: ubuntu-latest
    needs:
      - deploy-npm
      - publish-ghpr
      - publish-npm
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Success
        if: ${{ success() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "success"
          deployment-id: ${{ needs.deploy-npm.outputs.deployment_id }}

      - name: Failure
        if: ${{ failure() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "failure"
          deployment-id: ${{ needs.deploy-npm.outputs.deployment_id }}

  update-deployment-docker:
    name: Docker status
    runs-on: ubuntu-latest
    needs:
      - deploy-docker
      - publish-ghcr
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Success
        if: ${{ success() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "success"
          deployment-id: ${{ needs.deploy-docker.outputs.deployment_id }}

      - name: Failure
        if: ${{ failure() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "failure"
          deployment-id: ${{ needs.deploy-docker.outputs.deployment_id }}
